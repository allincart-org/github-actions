name: Run PHPStan
on:
  workflow_call:
    secrets:
      env:
        required: false
    inputs:
      extensionName:
        description: "Extension name"
        required: true
        type: string
      allincartVersion:
        required: false
        type: string
        default: ".auto"
      allincartVersionFallback:
        required: false
        type: string
        default: trunk
      composerRootVersion:
        required: false
        type: string
        default: ".auto"
      dependencies:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: ubuntu-latest
      allincart-repository:
        description: The allincart repository to checkout
        type: string
        default: allincart-org/allincart
env:
  ALLINCART_TOOL_CACHE_PHPSTAN: ${{ github.workspace }}/var/phpstan

jobs:
  run:
    name: Static Analyse
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: allincart-org/github-actions/allincart-version@main
        with:
          fallback: ${{ inputs.allincartVersionFallback }}
          repo: ${{ inputs.allincart-repository }}
        id: version
        if: ${{ inputs.allincartVersion == '.auto' || inputs.allincartVersion == '' }}
      - name: Setup AllinCart
        uses: allincart-org/setup-allincart@main
        with:
          allincart-version: ${{ steps.version.outputs.allincart-version || inputs.allincartVersion }}
          allincart-repository: ${{ inputs.allincart-repository }}
          composer-root-version: ${{ inputs.composerRootVersion }}
          php-version: 8.2
          env: prod
          install: "true"
      - name: Clone Extension
        uses: actions/checkout@v4
        with:
          path: custom/plugins/${{ inputs.extensionName }}
      - name: Clone Dependencies
        if: inputs.dependencies
        env:
          DEPS: ${{ inputs.dependencies }}
        run: |
          IFS=$'\n'
          for token in $(echo "${{secrets.env}}"); do
            export $token
          done
          for dep in $(echo "$DEPS" | envsubst | jq -c '.[]'); do
            dep_name=$(echo "$dep" | jq -r '.name')
            dep_repo=$(echo "$dep" | jq -r '.repo')
            git clone "$dep_repo" "custom/plugins/$dep_name"
          done
      - name: Install dependencies with Composer
        if: inputs.dependencies
        env:
          DEPS: ${{ inputs.dependencies }}
        run: |
          IFS=$'\n'
          for dep in $(echo "$DEPS" | envsubst | jq -c '.[]'); do
            dep_name=$(echo "$dep" | jq -r '.name')
            composer require $(composer -d "custom/plugins/$dep_name" config name)
          done
      - name: Install extension with Composer
        run: composer require $(composer -d custom/plugins/${{ inputs.extensionName }} config name)
      - name: Create phpstan.neon
        working-directory: custom/plugins/${{ inputs.extensionName }}
        run: |
          printf "parameters:\n  tmpDir: ${{ env.ALLINCART_TOOL_CACHE_PHPSTAN }}\nincludes:\n  - phpstan.neon.dist" > phpstan.neon
      - name: PHPStan cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ALLINCART_TOOL_CACHE_PHPSTAN }}
          key: ${{ runner.OS }}-${{ github.repository }}-phpstan-${{ github.sha }}
          restore-keys: |
            ${{ runner.OS }}-${{ github.repository }}-phpstan-
      - name: Refresh
        run: bin/console plugin:refresh
      - name: Install extension dependencies
        if: inputs.dependencies
        run: |
          IFS=$'\n'
          for dep in $(echo "$DEPS" | envsubst | jq -c '.[]'); do
            dep_name=$(echo "$dep" | jq -r '.name')
            bin/console plugin:install --activate $dep_name
          done
      - name: Install Extension
        run: bin/console plugin:install --activate ${{ inputs.extensionName }}
      - name: Build PHPStan Bootstrap
        run: php ${{ github.workspace }}/src/Core/DevOps/StaticAnalyze/phpstan-bootstrap.php
      - name: Run PHPStan
        working-directory: custom/plugins/${{ inputs.extensionName }}
        run: ${{ github.workspace }}/vendor/bin/phpstan analyze --error-format=github --no-progress
